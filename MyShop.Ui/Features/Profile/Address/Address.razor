@page "/Profile/Address"
@using Application.User.UserAddress.Responses
                         
@layout ProfileLayout

<MudPaper Elevation="1" Class="checkout-section shadow-around">
    <MudToolBar Class="justify-space-between" Dense="@true" WrapContent="false">
        <MudText Typo="Typo.h6" Class="mb-2" Align="Align.Start">
            نشانی‌ها
        </MudText> 
        <MudIconButton Icon="@Icons.Material.Outlined.Add"/>
    </MudToolBar>
        <div class="checkout-section-content">
            <MudRadioGroup
                T="long"
                Value="SelectedAddress"
                ValueChanged="@(async (long id) => await OnValueChanged(id))"
                >

                <div class="row mx-0">
                    <MudVirtualize Items="@AddressList">
                        <AddressInfo
                            Address="context"/>
                    </MudVirtualize>
                </div>
            </MudRadioGroup>
        </div>
</MudPaper>

@code {

    public long SelectedAddress { get; set; }


// Handle add new address button
    private void OpenAddAddressModal()
    {
// Open modal to add a new address
    }

    private ICollection<AddressDto>? AddressList { get; set; } = [];



    protected override async Task OnInitializedAsync()
    {
        await Addresses();
    }

   


    private async Task OnValueChanged(long arg)
    {
        var address = AddressList!.FirstOrDefault(a => a.Id == arg);


        var result = await AddressService.SetActiveAddress(address.Id);

        if (!result!.IsSuccess)
        {
            SnackBar.Add(result.MetaData.Message, Severity.Error);
            return;
        }

        SnackBar.Add(result.MetaData.Message, Severity.Success);

        foreach (var ad in AddressList!)
        {
            ad.ActiveAddress = ad == address;
        }

        SelectedAddress = arg;
        StateHasChanged();

    }



    private async Task Addresses()
    {
        var result = await AddressService.GetCurrentUserAddresses();

        if (!result!.IsSuccess)
        {
            SnackBar.Add(result.MetaData.Message, Severity.Error);
            return;
        }

        if (result.Data is null)
        {
            SnackBar.Add("یافت نشد.", Severity.Warning);
            return;
        }

    SelectedAddress = result.Data.FirstOrDefault(a => a.ActiveAddress)!.Id;

    AddressList = result.Data;
    }
}