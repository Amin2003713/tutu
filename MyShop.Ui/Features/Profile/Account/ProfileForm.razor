@using Application.User.Users.CommandAndQueries
@using Domain.User.Users
@using Microsoft.AspNetCore.Http.Internal
@using MyShop.Ui.Commen.Controles.Inputs
<MudPaper Class="shadow-around p-3">
    <EditForm OnValidSubmit="OnValidSubmit" Model="Command">
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudTextField @bind-Value="Command.UserId" Variant="Variant.Outlined" Class="font-weight-bold" hidden/>

            <!-- Name Input -->
            <MudItem xs="12" lg="6" Class="mb-5">
                <MudText Typo="Typo.subtitle2" Class="text-muted mb-3">نام:</MudText>
                <MudTextField @bind-Value="Command.Name" Variant="Variant.Outlined" Class="font-weight-bold"/>
            </MudItem>

            <!-- Family Name Input -->
            <MudItem xs="12" lg="6" Class="mb-5">
                <MudText Typo="Typo.subtitle2" Class="text-muted mb-3">نام خانوادگی:</MudText>
                <MudTextField @bind-Value="Command.Family" Variant="Variant.Outlined" Class="font-weight-bold"/>
            </MudItem>

            <!-- Phone Number Input -->
            <MudItem xs="12" lg="6" Class="mb-5">
                <MudText Typo="Typo.subtitle2" Class="text-muted mb-3">شماره تلفن همراه:</MudText>
                <MudTextField @bind-Value="Command.PhoneNumber" Variant="Variant.Outlined" Class="font-weight-bold"/>
            </MudItem>

            <!-- Email Input -->
            <MudItem xs="12" lg="6" Class="mb-5">
                <MudText Typo="Typo.subtitle2" Class="text-muted mb-3">پست الکترونیک:</MudText>
                <MudTextField @bind-Value="Command.Email" Variant="Variant.Outlined" Class="font-weight-bold"/>
            </MudItem>

            <!-- Avatar File Upload -->
            <MudItem xs="12" lg="6" Class="mb-5">
                <MudText Typo="Typo.subtitle2" Class="text-muted mb-3">انتخاب آواتار:</MudText>
                <ImageUploader @ref="ImageUploader" />
            </MudItem>

            <!-- Gender Radio -->
            <MudItem xs="12" lg="6" Class="mb-5">
                <MudText Typo="Typo.subtitle2" Class="text-muted mb-3">جنسیت:</MudText>
                <MudSelect @bind-Value="Command.Gender" Clearable="true" Variant="Variant.Outlined">
                    <MudSelectItem Value="@(Gender.Male)">
                        آقا
                    </MudSelectItem>
                    <MudSelectItem Value="@(Gender.Famele)">
                        خانم
                    </MudSelectItem>
                    <MudSelectItem Value="@(Gender.None)">
                        نمیدانم
                    </MudSelectItem>
                </MudSelect>
            </MudItem>


            <!-- Submit Button -->
            <MudItem xs="12" Class="text-right">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="Icons.Material.Filled.Save" ButtonType="ButtonType.Submit">
                    ذخیره تغییرات
                </MudButton>
                <MudButton Color="Color.Secondary" Variant="Variant.Filled" StartIcon="Icons.Material.Filled.Save"
                           ButtonType="ButtonType.Button" OnClick="@(async () => await IsEdit.InvokeAsync(false))">
                    انصراف
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>

@code{


    public EditUserCommand Command { get; set; } = new EditUserCommand();

    private ImageUploader ImageUploader { get; set; } = null!;

    [Parameter] public EventCallback<bool> IsEdit { get; set; }

    private bool UserGender { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        var user = (await Local.GetAsync<UserDto>(UserConstants.UserLocation))!;

        if (user is null)
        {
            var result = await UserService.GetCurrentUser();

            if (!result!.IsSuccess)
                SnackBar.Add(result.MetaData.Message, Severity.Error);

            user = result.Data;
        }

        Command = (new EditUserCommand
        {
            Gender = user.Gender,
            PhoneNumber = user.PhoneNumber,
            Email = user.Email,
            Family = user.Family,
            Name = user.Name,
            UserId = user.Id
        });
    }


    private async Task OnValidSubmit(EditContext obj)
    {
        Command.Avatar = await ImageUploader.ConvertBrowserFileToFormFile();

        var result = await UserService.EditUserCurrent(Command);
        if (!result!.IsSuccess)
            SnackBar.Add(result.MetaData.Message, Severity.Error);

        SnackBar.Add(result.MetaData.Message, Severity.Success);

    var userInfo = await UserService.GetCurrentUser();

        if (!userInfo!.IsSuccess)
            SnackBar.Add(result.MetaData.Message, Severity.Error);
        
        await Local.UpdateAsync(UserConstants.UserLocation, userInfo.Data);
     SnackBar.Add(userInfo.MetaData.Message, Severity.Success);

    await IsEdit.InvokeAsync(false);
    StateHasChanged();
    }


    private void OnChange(Gender gender)
    {
        Command.Gender = gender;
    }

}