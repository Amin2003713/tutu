@using Microsoft.AspNetCore.Http.Internal
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="@_fileUpload"
                   
                   OnFilesChanged="OnInputFileChanged"
                   InputClass="absolute overflow-hidden z-10"
                   InputStyle="opacity:0"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudTextField 
                Value="@(_fileNames.FirstOrDefault())"
                Placeholder="فایل‌ها را اینجا بکشید و رها کنید یا کلیک کنید"
                AdornmentIcon="@Icons.Material.Filled.Delete"
                OnAdornmentClick="@ClearAsync"
                Variant="Variant.Outlined" Class="font-weight-bold" />
        </ActivatorContent>
    </MudFileUpload>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>> _fileUpload = null!;
    private IBrowserFile Upload = null!;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
            Upload = file;
        }
    }

    public async Task<IFormFile> ConvertBrowserFileToFormFile()
    {
        if (Upload is null)
            return null!;
        // Prepare a memory stream to store the file data
        var memoryStream = new MemoryStream();


        if (Upload is null)
            return null!;

        await Upload!.OpenReadStream().CopyToAsync(memoryStream);

        // Reset the position of the memory stream to the beginning
        memoryStream.Position = 0;

        // Create a new FormFile instance using the memory stream
        var formFile = new FormFile(memoryStream, 0, Upload.Size, Upload.Name, Upload.Name)
        {
            Headers = new HeaderDictionary(),
            ContentType = Upload.ContentType
        };

        return formFile;
    }


    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

}