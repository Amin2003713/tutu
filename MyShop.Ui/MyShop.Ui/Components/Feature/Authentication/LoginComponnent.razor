
@page "/Auth/Login"
@using System.Globalization
@using Application.User.Auth.CommandAndQueries
@using Domain.User.Auth
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Features
@using MyShop.Ui.Client.Commen.Notifications
@using MyShop.Ui.Components.Layout
@inject  IJSRuntime Js
@layout UnAuthorizedLayout 
@rendermode  InteractiveServer



<MudCard class="auth-form shadow-around">
    <MudContainer class="site-logo">
        <MudImage Alt="Amin Sites"
                  Src="./assets/images/logo.png"/>


    </MudContainer>
    <MudCardHeader Class="auth-form-title">
        ورود به همتا
    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="Model"     OnValidSubmit="OnValidSubmit"
                  FormName="LoginForm" Enhance="true">

            <DataAnnotationsValidator/> 

            <MudGrid>
                <MudItem xs="12" sm="12">

                    <MudTextField
                        @bind-Value="Model.PhoneNumber"
                        Class="input-element"
                        For="@(() => Model.PhoneNumber)"
                        Validation="Model.PhoneNumber"
                        HelperText="09130000000" 
                        Variant="Variant.Text"  
                        HelperTextOnFocus="true"/>



                    <MudTextField
                        Class="mt-3 form-element-row"
                        Validation="Model.Password"
                        @bind-Value="@Model.Password"
                        For="@(() => Model.Password)"
                        HelperText="********"
                        Variant="Variant.Text"
                        HelperTextOnFocus="true"
                        Adornment="Adornment.End"
                        InputType="@PasswordInput"
                        AdornmentIcon="@PasswordInputIcon" 
                        OnAdornmentClick="ShowPassword" 
                        AdornmentColor="Color.Error"
                        AdornmentAriaLabel="Show Password"/>


                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit"  Color="Color.Primary"
                                Class="ml-auto">
                            ورود
                        </MudButton>
                    </MudCardActions>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCardContent>
</MudCard>
<SnackBar @ref="SnackBar"/>

@code {  

    private const string LoginForm = "login-form";

    [SupplyParameterFromForm(FormName = LoginForm)]
    private LoginCommand Model { get; set; } = new();

    [CascadingParameter] public HttpContext HttpContext { get; set; }


    [SupplyParameterFromQuery] public string ReturnUrl { get; set; } = "/";

    private SnackBar? SnackBar { get; set; }

    private bool IsVisible { get; set; } = false;

    private string? PasswordInputIcon { get; set; }

    private InputType PasswordInput = InputType.Password;

    private async Task OnValidSubmit()
    {
        var result = await Auth.Login(Model);

        if (!result.result || result.Token == null)
            await SnackBar
                !.ShowSnackBar("خطا", result.massage, BitSnackBarType.Error);
        try
        {
            Console.WriteLine("gooooo");
            await Js.InvokeVoidAsync("document.cookie" , 
                $"{AuthConfig.AuthCookie}={result.Token!.GetHashCode()}; expires={DateTime.Now.AddDays(7).ToUniversalTime().ToString(CultureInfo.InvariantCulture)}; path=/");

            await SnackBar!.ShowSnackBar("موفقیت", result.massage, BitSnackBarType.Success);
            NavigationManager.NavigateTo(ReturnUrl);
        }
        catch (Exception e)
        {
            await SnackBar!.ShowSnackBar("خطا", e.ToString(), BitSnackBarType.Error);
        }

        
    }



    void ShowPassword()
    {
        if (IsVisible)
        {
            IsVisible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            IsVisible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }




}