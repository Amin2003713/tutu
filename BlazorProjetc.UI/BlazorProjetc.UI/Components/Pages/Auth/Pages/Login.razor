@page "/Auth/Login"


@layout AuthLayout  


<AntiforgeryToken>@(new AntiforgeryToken())</AntiforgeryToken>


<EditForm Model="LoginCommand" OnValidSubmit="Submit" FormName="LoginForm"  Enhance="@true"
          class="auth-form shadow-around">
    <DataAnnotationsValidator/>
    <div class="site-logo">
        <a href="#">
            <img src="./assets/images/logo.png" alt="logo">
        </a>
    </div>
    <div class="auth-form-title">
        ورود به سامانه
    </div>

    <AuthInput Label="نام کاربری/شماره همراه" Icon="fad fa-mobile-alt">
        <Control>
            <InputText @bind-Value="LoginCommand.PhoneNumber" class="input-element"
                       id="phone-number"/>
        </Control>
        <Validation>
            <ValidationMessage For="@(() => LoginCommand.PhoneNumber)"/>
        </Validation>
    </AuthInput>

    <AuthInput Label="کلمه عبور" Icon="fad fa-key-skeleton">
        <Control>
            <InputText @bind-Value="LoginCommand.Password" class="input-element" id="password"/>
        </Control>
        <Anchor>
            <AuthAnchor class="link--with-border-bottom" NavigationText="رمز عبور خود را فراموش کرده‌ام"
                        ToAddress="/Auth/ForgetPassword"></AuthAnchor>
        </Anchor>
        <Validation>
            <ValidationMessage For="@(() => LoginCommand.Password)"/>
        </Validation>
    </AuthInput>

    <AuthButton ButtonText="ورود به همتا" class="btn-element btn-info-element" Icon="fad fa-sign-in-alt"/>

    <AuthAnchor class="link--with-border-bottom" Label="کاربر جدید هستید" NavigationText="ثبت نام در همتا"
                ToAddress="/Auth/Register"/>
</EditForm>

@code {

    [SupplyParameterFromForm(FormName = "LoginForm")]
    public LoginCommand LoginCommand { get; set; } = new();


    private async Task Submit()
    {
        try
        {
            var result = await Auth.Login(LoginCommand);
            if (!result.IsSuccess)
            {
                ShowSnackBar("Cannot Login");
                return;
            }

            var userInfo = await UserService.GetCurrentUser();
            if (!userInfo!.IsSuccess)
            {
                ShowSnackBar("Cannot Find user Infos.");
                return;
            }

            await Local.SetAsync("UserInfo", userInfo.Data);
            await Local.SetAsync("LoginResponse", result.Data);

            await AuthenticationStateProvider.UpdateAuthenticationStateAsync(userInfo.Data);
        }
        catch (NotFoundException ex)
        {
            ShowSnackBar(ex.Message);


            LoginCommand  = new();
        }
        catch (HttpRequestException ex)
        {
            ShowSnackBar(ex.Message);

            LoginCommand = new();
        }
    }

    private void ShowSnackBar(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopStart;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"Normal {message}" , Severity.Error, c =>
        {
            c.SnackbarVariant = Variant.Filled;
            c.ShowCloseIcon = true;
        });
    }

}