@page "/Auth/Login"
@using Microsoft.AspNetCore.Http
@using Shop.UI.Client.Features.Auth.Pages.Controles


@layout AuthLayout
@rendermode InteractiveServer





<AntiforgeryToken>@(new AntiforgeryToken())</AntiforgeryToken>


<EditForm Model="LoginCommand" OnValidSubmit="LoginUser" FormName="LoginForm" Enhance="@true"
          class="auth-form shadow-around">
    <DataAnnotationsValidator/>
    <div class="site-logo">
        <a href="#">
            <img src="./assets/images/logo.png" alt="logo">
        </a>
    </div>
    <div class="auth-form-title">
        ورود به سامانه
    </div>

    <AuthInput Label="نام کاربری/شماره همراه" Icon="fad fa-mobile-alt">
        <Control>
            <InputText @bind-Value="LoginCommand.PhoneNumber" class="input-element"
                       id="phone-number"/>
        </Control>
        <Validation>
            <ValidationMessage For="@(() => LoginCommand.PhoneNumber)"/>
        </Validation>
    </AuthInput>

    <AuthInput Label="کلمه عبور" Icon="fad fa-key-skeleton">
        <Control>
            <InputText @bind-Value="LoginCommand.Password" class="input-element" id="password"/>
        </Control>
        <Anchor>
            <AuthAnchor class="link--with-border-bottom" NavigationText="رمز عبور خود را فراموش کرده‌ام"
                        ToAddress="/Auth/ForgetPassword">
            </AuthAnchor>
        </Anchor>
        <Validation>
            <ValidationMessage For="@(() => LoginCommand.Password)"/>
        </Validation>
    </AuthInput>

    <AuthButton ButtonText="ورود به همتا" class="btn-element btn-info-element" Icon="fad fa-sign-in-alt"/>

    <AuthAnchor class="link--with-border-bottom" Label="کاربر جدید هستید" NavigationText="ثبت نام در همتا"
                ToAddress="/Auth/Register"/>
</EditForm>

@code {

    [SupplyParameterFromForm(FormName = "LoginForm")]
    public LoginCommand LoginCommand { get; set; } = new();

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        ShowSnackBar("Rendered");
    }

    public async Task LoginUser()
    {
        try
        {
            var result = await Auth.Login(LoginCommand);
            if (!result.IsSuccess)
            {
                ShowSnackBar(result.MetaData.Message);
                LoginCommand = new LoginCommand();
                return;
            }
        await Local.SetAsync("LoginResponse", result.Data);

        var userInfo = await UserService.GetCurrentUser();
            if (!userInfo!.IsSuccess)
            {
                ShowSnackBar(userInfo.MetaData.Message);
                LoginCommand = new LoginCommand();
                return;
            }

            await Local.SetAsync("UserInfo", userInfo.Data);

            // var customAuth = (PersistingServerAuthenticationStateProvider)AuthenticationStateProvider;

            NavigationManager.NavigateTo("/");
        }
        catch (NotFoundException ex)
        {
            ShowSnackBar(ex.Message);
            LoginCommand = new LoginCommand();
        }
        catch (HttpRequestException ex)
        {
            ShowSnackBar(ex.Message);

            LoginCommand = new LoginCommand();
        }
    }



    private void ShowSnackBar(string message)
    {
        Snackbar.Clear();
        Snackbar.Add($"{message}", Severity.Error, c =>
        {
            c.SnackbarVariant = Variant.Text;
            c.HideIcon = true;
            c.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            c.CloseAfterNavigation = true;
            c.Onclick = snackbar =>
            {
                snackbar.Dispose();
                return Task.CompletedTask;
            };
        });
    }

}