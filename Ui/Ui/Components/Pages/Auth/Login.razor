@page "/Auth/Login"


@layout AuthLayout
@rendermode InteractiveServer


<AntiforgeryToken>@(new AntiforgeryToken())</AntiforgeryToken>


    
    <AuthForm Model="LoginCommand" OnValidSubmit="Submit" FormName="Login" Enhance="@true"
              class="auth-form shadow-around">

        <div class="site-logo">
            <a href="#">
                <img src="./assets/images/logo.png" alt="logo">
            </a>
        </div>
        <div class="auth-form-title">
            ورود به سامانه
        </div>

        <AuthInput Label="نام کاربری/شماره همراه" Icon="fad fa-mobile-alt">
            <Control>
                <InputText @bind-Value="LoginCommand.PhoneNumber" class="input-element"
                           id="phone-number"/>
            </Control>
            <Validation>
                <ValidationMessage For="@(() => LoginCommand.PhoneNumber)"/>
            </Validation>
        </AuthInput>

        <AuthInput Label="کلمه عبور" Icon="fad fa-key-skeleton">
            <Control>
                <InputText @bind-Value="LoginCommand.Password" class="input-element" id="password"/>
            </Control>
            <Anchor>
                <AuthAnchor class="link--with-border-bottom" NavigationText="رمز عبور خود را فراموش کرده‌ام"
                            ToAddress="/Auth/ForgetPassword"></AuthAnchor>
            </Anchor>
            <Validation>
                <ValidationMessage For="@(() => LoginCommand.Password)"/>
            </Validation>
        </AuthInput>

        <AuthButton ButtonText="ورود به همتا" class="btn-element btn-info-element"  Icon="fad fa-sign-in-alt"/>
        
        <AuthAnchor class="link--with-border-bottom" Label="کاربر جدید هستید" NavigationText="ثبت نام در همتا" ToAddress="/Auth/Register"/>
    </AuthForm>

@code {

    [SupplyParameterFromForm(FormName = "LoginForm")]
    public LoginCommand LoginCommand { get; set; } = new();

    private bool isToastVisible;


    private async Task Submit()
    {
        try
        {
            var result = await Auth.Login(LoginCommand);
            if (!result.IsSuccess)
            {
                // If an error occurs, show the toast notification
                isToastVisible = true;

                // Optionally hide the toast after a few seconds
                await Task.Delay(3000);
                isToastVisible = false;
            }
        }
        catch (Exception ex)
        {
            // Show the toast notification when an error occurs
            isToastVisible = true;

            // Automatically hide the toast after a few seconds
            await Task.Delay(3500);
            isToastVisible = false;
        }
    }

}