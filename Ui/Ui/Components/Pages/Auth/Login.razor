@page "/Auth/Login" 
@inject ProtectedLocalStorage Local
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Mvc.ModelBinding



@layout AuthLayout
@rendermode InteractiveServer 

<EditForm  Model="Command" FormName="Login" class="auth-form shadow-around" OnValidSubmit="Submit" Enhance="true">
    <DataAnnotationsValidator/>
    <p hidden="@IsHidden">@LoginError</p>

    <div class="site-logo">
        <a href="#">
            <img src="./assets/images/logo.png" alt="logo">
        </a>
    </div>
    <div class="auth-form-title">
        ورود به همتا
    </div>

    <AuthInput LabelText="شماره موبایل" InputId="phone-number">
            <InputControl>
                <InputText type="text"  @bind-Value="Command.PhoneNumber" class="input-element" id="phone-number"/>
            </InputControl>
            <InputIcon>
                <i class="fad fa-mobile-alt"></i>
            </InputIcon>
            <ValidationControl>
                <ValidationMessage For="() => Command.PhoneNumber"></ValidationMessage>
            </ValidationControl>
        </AuthInput>

        <AuthInput LabelText="کلمه عبور" InputId="password">
            <InputControl>
                <InputText type="text" @bind-Value="Command.Password" class="input-element" id="password"/>
            </InputControl>  
            <InputIcon>
                <i class="fad fa-key-skeleton"></i>
            </InputIcon>
            <AnchorControl>
                <a href="#" class="link--with-border-bottom">رمز عبور خود را فراموش کرده‌ام</a>
            </AnchorControl>
            <ValidationControl>
                <ValidationMessage For="@(() =>Command.Password )"></ValidationMessage>
            </ValidationControl>
        </AuthInput>


        <AuthButton ButtonText="ورود به همتا" class="btn-element btn-info-element" type="submit">
            <IconControl>
                <i class="fad fa-sign-in-alt"></i>
            </IconControl>
        </AuthButton>
   
</EditForm>


@code {

    [SupplyParameterFromForm(FormName = "login")]
    public LoginCommand Command { get; set; } = new();

    private string? LoginError { get; set; }

    private bool IsHidden { get; set; } = true;
    // [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;


// protected override async Task OnInitializedAsync()
//     {
//         if (HttpMethods.IsGet(HttpContext.Request.Method))
//         {
//             // Clear the existing external cookie to ensure a clean login process
//             await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
//         }
//     }    
      [ValidateAntiForgeryToken]
    private async Task Submit(EditContext obj)
    {
        var result =await Auth.Login(Command);

        if (!result.IsSuccess)
        {
            LoginError = result.MetaData.Message;
            IsHidden = false;
            return;
        }

        var token = result.Data.Token;

      
        await Local.SetAsync("Token", token);
        await Local.SetAsync("refresh", result.Data.RefreshToken);

        NavigationManager.NavigateTo("/");
    }                

}