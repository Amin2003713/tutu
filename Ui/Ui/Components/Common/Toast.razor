<div class="toast @ModalClass @TypeClass" style="position: fixed; top: 20px; right: 20px; min-width: 250px;"
     role="alert">
    <div class="toast-header d-flex justify-content-between align-items-center @HeaderClass">
        <strong class="StatusHeader">@GetHeaderText()</strong>
        <button type="button" class="btn-close justify-content-end" aria-label="بستن" @onclick="CloseModal"></button>
    </div>
    <div class="toast-body">
        @ErrorMessage
    </div>
</div>

@code {
    [Parameter] public string ErrorMessage { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public MessageTypes MessageType { get; set; } = MessageTypes.Info; // Default to "Info"
    [Parameter] public EventCallback OnClose { get; set; }
    
    private Timer? _autoCloseTimer;

    private string ModalClass => IsVisible ? "show" : "";

    private string TypeClass => MessageType switch
    {
        MessageTypes.Warning => "toast-warning",
        MessageTypes.Error => "toast-error",
        MessageTypes.Success => "toast-success",
        MessageTypes.Danger => "toast-danger",
        _ => "toast-info"
    };

    private string GetHeaderText()
    {
        return MessageType switch
        {
            MessageTypes.Warning => "⚠️ هشدار",
            MessageTypes.Error => "❌ خطا",
            MessageTypes.Success => "✅ موفقیت",
            MessageTypes.Danger => "❗ خطر",
            _ => "ℹ️ اطلاع"
        };
    }

    private string HeaderClass => MessageType switch
    {
        MessageTypes.Warning => "header-warning",
        MessageTypes.Error => "header-error",
        MessageTypes.Success => "header-success",
        MessageTypes.Danger => "header-danger",
        _ => "header-info"
    };

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            StartAutoCloseTimer();
        }
    }

    private void StartAutoCloseTimer()
    {
        // Stop the timer if it's already running
        _autoCloseTimer?.Dispose();

        // Start a new timer that triggers CloseModal after 3 seconds
        _autoCloseTimer = new Timer(_ => CloseModal(), null, 3000, Timeout.Infinite);
    }

    private void CloseModal()
    {
        if (IsVisible)
        {
            IsVisible = false;
            InvokeAsync(StateHasChanged);
            OnClose.InvokeAsync();
        }
    }

    public enum MessageTypes
    {
        Info,
        Warning,
        Error,
        Success,
        Danger
    }

    public void Dispose()
    {
        _autoCloseTimer?.Dispose();
    }
}
