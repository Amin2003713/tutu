@page "/Auth/Login"
@using System.Security.Claims
@using System.Security.Cryptography
@using Application.User.Auth.CommandAndQueries
@using System.Text
@using Domain.User.Auth
@using Microsoft.AspNetCore.Authentication
@layout UnAuthorizedLayout

<div class="auth-form shadow-around">
    <div class="site-logo">
        <a href="#">
            <img src="./assets/images/logo.png" alt="logo">
        </a>
    </div>
    <div class="auth-form-title">
        ورود به همتا
    </div>
    <EditForm Enhance="true" OnValidSubmit="OnValidSubmit" Model="Model" FormName="@LoginForm">
        <DataAnnotationsValidator/>
        <div class="form-element-row">
            <label for="phone-number" class="label-element">شماره موبایل</label>
            <div class="form-element-with-icon">
                <InputText @bind-Value="Model.PhoneNumber" type="text" class="input-element" id="phone-number"/>
                <ValidationMessage For="@(() => Model.PhoneNumber)"/>
                <i class="fad fa-mobile-alt"></i>
            </div>
        </div>
        <div class="form-element-row">
            <label for="password" class="label-element">
                <span class="d-flex justify-content-between">
                    <span>کلمه عبور</span>
                    <a href="#" class="link--with-border-bottom">رمز عبور خود را فراموش کرده‌ام</a>
                </span>
            </label>
            <div class="form-element-with-icon">
                <InputText type="@PasswordInput" @bind-Value="Model.Password" class="input-element" id="password"/>
                <ValidationMessage For="@(() => Model.Password)"/>
                <i class="fad fa-key-skeleton" @onclick="ShowPassword"></i>
            </div>
        </div>
        <div class="form-element-row">
            <label class="container-checkbox">
                مرا به خاطر داشته باش
                <input type="checkbox" checked="checked">
                <span class="checkmark"></span>
            </label>
        </div>
        <div class="form-element-row text-left">
            <button class="btn-element btn-info-element" type="submit">
                <i class="fad fa-sign-in-alt"></i>
                ورود به همتا
            </button>
        </div>

    </EditForm>
    <div class="auth-form-footer">
        <span>کاربر جدید هستید؟</span>
        <a href="#" class="link--with-border-bottom">ثبت نام در همتا</a>
    </div>
</div>


@code {

    private const string LoginForm = "login-form";

    [SupplyParameterFromForm(FormName = LoginForm)]
    private LoginCommand Model { get; set; } = new();

    [CascadingParameter] public HttpContext HttpContext { get; set; }


    [SupplyParameterFromQuery] private string ReturnUrl { get; set; } = "/";


    private bool IsVisible { get; set; }


    private string PasswordInput = "password";

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Add((Hash()), Severity.Info);

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            var auth = await AuthState.GetAuthenticationStateAsync();
            if (auth.User.FindFirstValue(AuthConfig.Token) != null)
                NavigationManager.NavigateTo(ReturnUrl);

            await HttpContext.SignOutAsync();
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            var result = await Auth.Login(Model);

            if (!result.result || result.Token == null)
            {
                Snackbar.Add(result.massage, Severity.Error);
                NavigationManager.Refresh();
            }


            await HttpContext.SignInAsync(AuthConfig.ShopSchema, result.Token);
            Snackbar.Add(result.massage, Severity.Success);
            NavigationManager.NavigateTo("/Profile");
        }
        catch (Exception e)
        {
        Snackbar.Add(e.Message, Severity.Error);
        }
    }

    public static string Hash(string inputValue = "amin1382")
    {
        using var sha256 = SHA256.Create();
        var originalBytes = Encoding.Default.GetBytes(inputValue);
        var encodedBytes = sha256.ComputeHash(originalBytes);
        var a =  Convert.ToBase64String(encodedBytes);
        return a;
    }
    void ShowPassword()
    {
        PasswordInput = IsVisible ? "text" : "password";

        IsVisible = !IsVisible;
    }

}